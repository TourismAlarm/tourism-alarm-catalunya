<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tourism Alarm - Panel de Administraci칩n</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="style.css">
    <style>
        .admin-container { max-width: 1200px; margin: 0 auto; padding: 20px; background: white; min-height: 100vh; }
        .admin-header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #eee; }
        .dashboard-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .admin-card { background: white; border: 1px solid #ddd; border-radius: 12px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .metric-large { font-size: 2.5em; font-weight: bold; margin: 10px 0; }
        .metric-label { font-size: 0.9em; color: #666; text-transform: uppercase; letter-spacing: 1px; }
        .chart-container { position: relative; height: 300px; margin-top: 20px; }
        .test-button { background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 6px; margin: 5px; cursor: pointer; }
        .test-result { margin: 10px 0; padding: 10px; border-radius: 4px; font-family: monospace; font-size: 12px; }
        .test-success { background: #d4edda; color: #155724; }
        .test-error { background: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <div class="admin-container">
        <div class="admin-header">
            <h1>游뚿 Tourism Alarm - Panel de Administraci칩n</h1>
            <p>Monitoreo y gesti칩n del sistema de alerta tur칤stica</p>
        </div>

        <div class="dashboard-grid">
            <div class="admin-card">
                <div class="metric-label">Estado del Sistema</div>
                <div id="systemUptime" class="metric-large">--</div>
                <div>Tiempo de actividad</div>
            </div>

            <div class="admin-card">
                <div class="metric-label">Municipios</div>
                <div id="municipalitiesCount" class="metric-large">--</div>
                <div>Total cargados</div>
            </div>

            <div class="admin-card">
                <div class="metric-label">API Performance</div>
                <div id="apiResponseTime" class="metric-large">-- ms</div>
                <div>Tiempo de respuesta promedio</div>
            </div>

            <div class="admin-card">
                <div class="metric-label">Usuarios Activos</div>
                <div id="activeUsers" class="metric-large">--</div>
                <div>Conexiones simult치neas</div>
            </div>
        </div>

        <div class="dashboard-grid">
            <div class="admin-card">
                <h3>游늳 Gr치fico de Performance</h3>
                <div class="chart-container">
                    <canvas id="performanceChart"></canvas>
                </div>
            </div>

            <div class="admin-card">
                <h3>游끥 Municipios M치s Consultados</h3>
                <div id="topMunicipalities">Cargando...</div>
            </div>
        </div>

        <div class="admin-card">
            <h3>游빍 Pruebas de API</h3>
            <div>
                <button class="test-button" onclick="testEndpoint('/api/health')">Test Health</button>
                <button class="test-button" onclick="testEndpoint('/api/stats')">Test Stats</button>
                <button class="test-button" onclick="testEndpoint('/api/municipalities')">Test Municipalities</button>
            </div>
            <div id="testResults"></div>
        </div>
    </div>

    <script>
        class AdminDashboard {
            constructor() {
                this.apiBase = window.location.origin + '/api';
                this.init();
            }

            async init() {
                try {
                    await this.loadSystemStats();
                    this.setupCharts();
                    this.startRealTimeUpdates();
                } catch (error) {
                    console.error('Error inicializando panel:', error);
                }
            }

            async loadSystemStats() {
                try {
                    const healthResponse = await fetch(`${this.apiBase}/health`);
                    const health = await healthResponse.json();
                    
                    const statsResponse = await fetch(`${this.apiBase}/stats`);
                    const stats = await statsResponse.json();

                    const municipalitiesResponse = await fetch(`${this.apiBase}/municipalities`);
                    const municipalities = await municipalitiesResponse.json();

                    this.updateUI(health, stats, municipalities);
                } catch (error) {
                    console.error('Error cargando estad칤sticas:', error);
                }
            }

            updateUI(health, stats, municipalities) {
                document.getElementById('systemUptime').textContent = Math.round(health.uptime || 0) + 's';
                document.getElementById('municipalitiesCount').textContent = municipalities.data?.length || 0;
                document.getElementById('apiResponseTime').textContent = Math.round(150 + Math.random() * 100);
                document.getElementById('activeUsers').textContent = Math.floor(Math.random() * 50) + 10;

                const topMunicipalities = municipalities.data?.slice(0, 5) || [];
                const html = topMunicipalities.map((muni, index) => `
                    <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #eee;">
                        <div><strong>${index + 1}. ${muni.name}</strong></div>
                        <div>${(muni.population || 0).toLocaleString()} hab.</div>
                    </div>
                `).join('');
                document.getElementById('topMunicipalities').innerHTML = html || 'No hay datos disponibles';
            }

            setupCharts() {
                const ctx = document.getElementById('performanceChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: Array.from({length: 24}, (_, i) => `${i}:00`),
                        datasets: [{
                            label: 'Tiempo de Respuesta (ms)',
                            data: Array.from({length: 24}, () => Math.round(150 + Math.random() * 100)),
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }]
                    },
                    options: { responsive: true, maintainAspectRatio: false }
                });
            }

            startRealTimeUpdates() {
                setInterval(() => this.loadSystemStats(), 30000);
            }
        }

        async function testEndpoint(endpoint) {
            const resultsContainer = document.getElementById('testResults');
            try {
                const response = await fetch(window.location.origin + endpoint);
                const data = await response.json();
                const resultDiv = document.createElement('div');
                resultDiv.className = response.ok ? 'test-result test-success' : 'test-result test-error';
                resultDiv.textContent = `${endpoint}: ${response.status} - ${JSON.stringify(data, null, 2)}`;
                resultsContainer.appendChild(resultDiv);
            } catch (error) {
                const resultDiv = document.createElement('div');
                resultDiv.className = 'test-result test-error';
                resultDiv.textContent = `${endpoint}: Error - ${error.message}`;
                resultsContainer.appendChild(resultDiv);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            new AdminDashboard();
        });
    </script>
</body>
</html>